
terraform { required_providers { aws = { source="hashicorp/aws", version="~>5.0" } } }
provider "aws" { region = "{{ region }}" }
data "aws_vpc" "default" { default = true }
data "aws_subnet_ids" "default" { vpc_id = data.aws_vpc.default.id }

resource "aws_ecr_repository" "repo" { name="autodeploy-repo" image_tag_mutability="MUTABLE" }

resource "aws_ecs_cluster" "this" { name="autodeploy-cluster" }

resource "aws_iam_role" "task_exec" {
  name="autodeploy-task-exec"
  assume_role_policy = jsonencode({
    Version="2012-10-17",
    Statement=[{Effect="Allow",Principal={Service="ecs-tasks.amazonaws.com"},Action="sts:AssumeRole"}]
  })
}
resource "aws_iam_role_policy_attachment" "exec_attach" {
  role=aws_iam_role.task_exec.name
  policy_arn="arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"
}

resource "aws_security_group" "alb" {
  name="autodeploy-alb-sg" vpc_id=data.aws_vpc.default.id
  ingress { from_port=80 to_port=80 protocol="tcp" cidr_blocks=["0.0.0.0/0"] }
  egress  { from_port=0 to_port=0 protocol="-1" cidr_blocks=["0.0.0.0/0"] }
}
resource "aws_lb" "this" {
  name="autodeploy-alb" load_balancer_type="application"
  security_groups=[aws_security_group.alb.id]
  subnets=data.aws_subnet_ids.default.ids
}
resource "aws_lb_target_group" "tg" {
  name="autodeploy-tg" port={{ container_port }} protocol="HTTP"
  vpc_id=data.aws_vpc.default.id target_type="ip"
  health_check { path="/" interval=30 }
}
resource "aws_lb_listener" "http" {
  load_balancer_arn=aws_lb.this.arn port=80 protocol="HTTP"
  default_action { type="forward" target_group_arn=aws_lb_target_group.tg.arn }
}
variable "image_uri" { type=string }

resource "aws_ecs_task_definition" "task" {
  family="autodeploy-task" network_mode="awsvpc"
  requires_compatibilities=["FARGATE"] cpu="256" memory="512"
  execution_role_arn=aws_iam_role.task_exec.arn
  container_definitions = jsonencode([{
    name="app", image=var.image_uri,
    portMappings=[{containerPort={{ container_port }}, hostPort={{ container_port }}}]
  }])
}
resource "aws_security_group" "svc" {
  name="autodeploy-svc-sg" vpc_id=data.aws_vpc.default.id
  egress { from_port=0 to_port=0 protocol="-1" cidr_blocks=["0.0.0.0/0"] }
}
resource "aws_ecs_service" "svc" {
  name="autodeploy-svc" cluster=aws_ecs_cluster.this.id task_definition=aws_ecs_task_definition.task.arn
  desired_count=1 launch_type="FARGATE"
  network_configuration { subnets=data.aws_subnet_ids.default.ids security_groups=[aws_security_group.svc.id] assign_public_ip=true }
  load_balancer { target_group_arn=aws_lb_target_group.tg.arn container_name="app" container_port={{ container_port }} }
  depends_on=[aws_lb_listener.http]
}
output "alb_dns" { value=aws_lb.this.dns_name }
