
terraform { required_providers { aws = { source="hashicorp/aws", version="~>5.0" } } }
provider "aws" { region="{{ region }}" }

variable "lambda_zip" { type=string }
variable "handler"    { type=string  default="{{ handler }}" }
variable "runtime"    { type=string  default="python3.11" }

resource "aws_iam_role" "lambda_exec" {
  name="autodeploy-lambda-exec"
  assume_role_policy=jsonencode({
    Version="2012-10-17", Statement=[{Effect="Allow", Principal={Service="lambda.amazonaws.com"}, Action="sts:AssumeRole"}]
  })
}
resource "aws_iam_role_policy_attachment" "basic" {
  role=aws_iam_role.lambda_exec.name
  policy_arn="arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
}
resource "aws_lambda_function" "fn" {
  function_name="autodeploy-fn"
  role=aws_iam_role.lambda_exec.arn
  handler=var.handler
  runtime=var.runtime
  filename=var.lambda_zip
  source_code_hash=filebase64sha256(var.lambda_zip)
  timeout=15
}
resource "aws_apigatewayv2_api" "http" { name="autodeploy-http" protocol_type="HTTP" }
resource "aws_apigatewayv2_integration" "lambda" {
  api_id=aws_apigatewayv2_api.http.id integration_type="AWS_PROXY" integration_uri=aws_lambda_function.fn.arn
}
resource "aws_apigatewayv2_route" "default" {
  api_id=aws_apigatewayv2_api.http.id route_key="$default" target="integrations/${aws_apigatewayv2_integration.lambda.id}"
}
resource "aws_lambda_permission" "apigw" {
  statement_id="AllowAPIGatewayInvoke" action="lambda:InvokeFunction"
  function_name=aws_lambda_function.fn.function_name principal="apigateway.amazonaws.com"
  source_arn="${aws_apigatewayv2_api.http.execution_arn}/*/*"
}
resource "aws_apigatewayv2_stage" "prod" { api_id=aws_apigatewayv2_api.http.id name="$default" auto_deploy=true }
output "invoke_url" { value=aws_apigatewayv2_api.http.api_endpoint }
